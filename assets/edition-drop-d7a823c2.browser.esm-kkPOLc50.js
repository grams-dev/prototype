var u=Object.defineProperty;var d=(s,a,t)=>a in s?u(s,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[a]=t;var o=(s,a,t)=>(d(s,typeof a!="symbol"?a+"":a,t),t);import{N as g,p as C,A as f,D as w,q as y,r as W,s as T,t as i,T as A,B as R}from"./index-CWqocCBY.js";import{C as E,a as k,b as S,G as b}from"./contract-appuri-3d68505c.browser.esm-DnGo262I.js";import{C as v}from"./contract-interceptor-d7b164a7.browser.esm-C_yNedqZ.js";import{C as N,a as O}from"./contract-owner-1f113a23.browser.esm-BqMSwWj7.js";import{C as B}from"./contract-platform-fee-789b7ae1.browser.esm-B2Y05Hxj.js";import{C as I}from"./contract-roles-423d8c8f.browser.esm-DSyzeMxB.js";import{C as P}from"./contract-sales-c7829960.browser.esm-CQjaOE8f.js";import{D as F}from"./erc-1155-11567028.browser.esm-CdlwbkNy.js";import{S as D}from"./erc-1155-standard-ed14a5bb.browser.esm-DKXopKH8.js";import{P as _}from"./thirdweb-checkout-23db4ad3.browser.esm-CkPmVm5o.js";import"./setErc20Allowance-0fd3045e.browser.esm-C40ZqSck.js";import"./QueryParams-c67b6cd4.browser.esm-D8xZYVPj.js";import"./index-DYu1mf5B.js";import"./assertEnabled-0bc21898.browser.esm-DHgq_7n9.js";class q{constructor(a){this.events=a}async getAllClaimerAddresses(a){const t=(await this.events.getEvents("TokensClaimed")).filter(r=>r.data&&R.isBigNumber(r.data.tokenId)?r.data.tokenId.eq(a):!1);return Array.from(new Set(t.filter(r=>{var e;return typeof((e=r.data)==null?void 0:e.claimer)=="string"}).map(r=>r.data.claimer)))}}const p=class p extends D{constructor(t,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,m=arguments.length>5?arguments[5]:void 0,l=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new C(t,r,c,n,e);super(l,e,m);o(this,"createBatch",i(async(t,r)=>this.erc1155.lazyMint.prepare(t,r)));o(this,"claimTo",i((()=>{var t=this;return async function(r,e,n){let c=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return t.erc1155.claimTo.prepare(r,e,n,{checkERC20Allowance:c})}})()));o(this,"claim",i((()=>{var t=this;return async function(r,e){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;const c=await t.contractWrapper.getSignerAddress();return t.claimTo.prepare(c,r,e,n)}})()));o(this,"burnTokens",i(async(t,r)=>this.erc1155.burn.prepare(t,r)));this.abi=f.parse(c),this.metadata=new E(this.contractWrapper,w,this.storage),this.app=new k(this.contractWrapper,this.metadata,this.storage),this.roles=new I(this.contractWrapper,p.contractRoles),this.royalties=new N(this.contractWrapper,this.metadata),this.sales=new P(this.contractWrapper),this.claimConditions=new F(this.contractWrapper,this.metadata,this.storage),this.events=new S(this.contractWrapper),this.history=new q(this.events),this.encoder=new y(this.contractWrapper),this.estimator=new b(this.contractWrapper),this.platformFees=new B(this.contractWrapper),this.interceptor=new v(this.contractWrapper),this.checkout=new _(this.contractWrapper),this.owner=new O(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t,r){return this.erc1155.getOwned(t,r)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[W("transfer"),T])}async getClaimTransaction(t,r,e){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0;return this.erc1155.getClaimTransaction(t,r,e,{checkERC20Allowance:n})}async prepare(t,r,e){return A.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:e})}async call(t,r,e){return this.contractWrapper.call(t,r,e)}};o(p,"contractRoles",g);let h=p;export{h as EditionDrop};
